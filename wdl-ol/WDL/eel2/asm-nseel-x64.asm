; THIS FILE AUTOGENERATED FROM asm-nseel-x86-gcc.c by a2x64.php

%define EEL_F_SIZE 8
%define TARGET_X64
SECTION .text


global nseel_asm_1pdd
nseel_asm_1pdd:


    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 128
    fstp qword [rsp]
    movq xmm0, [rsp]
%ifdef AMD64ABI
       mov r15, rsi
       call rdi
       mov rsi, r15
%else
       call rdi
%endif
    movq [rsp], xmm0
    fld qword [rsp]
    add rsp, 128
%else
    sub rsp, 16
    fstp qword [rsp]
    call rdi
    add rsp, 16
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_1pdd_end
nseel_asm_1pdd_end:


global nseel_asm_2pdd
nseel_asm_2pdd:


    mov rdi, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 128
    fstp qword [rsp+8]
    fstp qword [rsp]
    movq xmm1, [rsp+8]
    movq xmm0, [rsp]
%ifdef AMD64ABI
      mov r15, rsi
      call rdi
      mov rsi, r15
%else
      call rdi
%endif
    movq [rsp], xmm0
    fld qword [rsp]
    add rsp, 128
%else
    sub rsp, 16
    fstp qword [rsp+8]
    fstp qword [rsp]
    call rdi
    add rsp, 16
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pdd_end
nseel_asm_2pdd_end:


global nseel_asm_2pdds
nseel_asm_2pdds:


    mov rax, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 128
    fstp qword [rsp]
    movq xmm0, [rdi]
    movq xmm1, [rsp]
%ifdef AMD64ABI
      mov r15, rsi
      mov r14, rdi
      call rax
      mov rsi, r15
      movq [r14], xmm0
      mov rax, r14  ;  set return value 
%else
      call rax
      movq [rdi], xmm0
      mov rax, rdi  ;  set return value 
%endif
    add rsp, 128
%else
    sub rsp, 8
    fstp qword [rsp]
    push dword [rdi+4]  ;  push parameter 
    push dword [rdi]     ;  push the rest of the parameter 
    call rax
    add rsp, 16
    fstp qword [rdi]  ;  store result 
    mov rax, rdi  ;  set return value 
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_2pdds_end
nseel_asm_2pdds_end:


global nseel_asm_exec2
nseel_asm_exec2:

      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_exec2_end
nseel_asm_exec2_end:


global nseel_asm_invsqrt
nseel_asm_invsqrt:

    mov rdx, 0x5f3759df
    fst dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    sub rcx, rcx
    fmul qword [rax]
%else
    fmul qword [qword 0xFEFEFEFEFEFEFEFE]
%endif
    mov ecx, dword [rsi]
    sar rcx, 1
    sub rdx, rcx
    mov dword [rsi], edx
    fmul dword [rsi]
    fmul dword [rsi]
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rax]
%else
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
%endif
    fmul dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_invsqrt_end
nseel_asm_invsqrt_end:


global nseel_asm_sin
nseel_asm_sin:

    fsin
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sin_end
nseel_asm_sin_end:


global nseel_asm_cos
nseel_asm_cos:

    fcos
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_cos_end
nseel_asm_cos_end:


global nseel_asm_tan
nseel_asm_tan:

    fptan
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_tan_end
nseel_asm_tan_end:


global nseel_asm_sqr
nseel_asm_sqr:

    fmul st0, st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqr_end
nseel_asm_sqr_end:


global nseel_asm_sqrt
nseel_asm_sqrt:

    fabs
    fsqrt
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sqrt_end
nseel_asm_sqrt_end:


global nseel_asm_log
nseel_asm_log:

    fldln2
    fxch
    fyl2x
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log_end
nseel_asm_log_end:


global nseel_asm_log10
nseel_asm_log10:

    fldlg2
    fxch
    fyl2x

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_log10_end
nseel_asm_log10_end:


global nseel_asm_abs
nseel_asm_abs:

    fabs
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_abs_end
nseel_asm_abs_end:


global nseel_asm_assign
nseel_asm_assign:
%ifdef TARGET_X64

    mov rdx, qword [rax]
    mov rcx, rdx
    shr rdx, 32
    and rdx, 0x7FF00000
    jz label_0
    cmp rdx, 0x7FF00000
    je label_0
    jmp label_1
label_0:
    
    sub rcx, rcx
label_1:
    
    mov qword [rdi], rcx
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov edx, dword [rax+4]
    mov ecx, dword [rax]
    and rdx, 0x7ff00000
    jz label_2    ;  if exponent=zero, zero
    cmp rdx, 0x7ff00000
    je label_2  ;  if exponent=all 1s, zero
    mov edx, dword [rax+4]  ;  reread
    jmp label_3
label_2:
    
    sub rcx, rcx
    sub rdx, rdx
label_3:
    
    mov dword [rdi], ecx
    mov dword [rdi+4], edx
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_assign_end
nseel_asm_assign_end:


global nseel_asm_assign_fromfp
nseel_asm_assign_fromfp:
%ifdef TARGET_X64

    fstp qword [rdi]
    mov rdx, qword [rdi]
    mov r15, 0x7FF0000000000000
    and rdx, r15
    jz label_4
    cmp rdx, r15
    jne label_5
label_4:
    
    sub rcx, rcx
    mov qword [rdi], rcx
label_5:
    
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    fstp qword [rdi]
    mov edx, dword [rdi+4]
    and rdx, 0x7ff00000
    jz label_6
    cmp rdx, 0x7ff00000
    jne label_7
label_6:
    
      fldz
      fstp qword [rdi]
label_7:
    
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_assign_fromfp_end
nseel_asm_assign_fromfp_end:


global nseel_asm_assign_fast
nseel_asm_assign_fast:
%ifdef TARGET_X64

    mov rdx, qword [rax]
    mov qword [rdi], rdx
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov edx, dword [rax+4]
    mov ecx, dword [rax]
    mov dword [rdi], ecx
    mov dword [rdi+4], edx
    mov rax, rdi
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_assign_fast_end
nseel_asm_assign_fast_end:


global nseel_asm_add
nseel_asm_add:

    fadd
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_end
nseel_asm_add_end:


global nseel_asm_add_op
nseel_asm_add_op:

    fadd qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_add_op_end
nseel_asm_add_op_end:


global nseel_asm_sub
nseel_asm_sub:

%ifdef __GNUC__
    fsubr  ;  gnuc has fsub/fsubr backwards, ack
%else
    fsub
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_end
nseel_asm_sub_end:


global nseel_asm_sub_op
nseel_asm_sub_op:

    fsubr qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sub_op_end
nseel_asm_sub_op_end:


global nseel_asm_mul
nseel_asm_mul:

    fmul
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_end
nseel_asm_mul_end:


global nseel_asm_mul_op
nseel_asm_mul_op:

    fmul qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mul_op_end
nseel_asm_mul_op_end:


global nseel_asm_div
nseel_asm_div:

%ifdef __GNUC__
    fdivr  ;  gcc inline asm seems to have fdiv/fdivr backwards
%else
    fdiv
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_end
nseel_asm_div_end:


global nseel_asm_div_op
nseel_asm_div_op:

    fld qword [rdi]
%ifndef __GNUC__
    fxch  ;  gcc inline asm seems to have fdiv/fdivr backwards
%endif
    fdiv
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_div_op_end
nseel_asm_div_op_end:


global nseel_asm_mod
nseel_asm_mod:

    fabs
    fisttp dword [rsi]
    fabs
    fisttp dword [rsi+4]
    xor rdx, rdx
%ifdef TARGET_X64
    sub rax, rax
%endif
    cmp dword [rsi], 0
    je label_8  ;  skip devide, set return to 0
    mov eax, dword [rsi+4]
    div dword [rsi]
label_8:
    
    mov dword [rsi], edx
    fild dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_end
nseel_asm_mod_end:


global nseel_asm_shl
nseel_asm_shl:

    fisttp dword [rsi]
    fisttp dword [rsi+4]
    mov ecx, dword [rsi]
    mov eax, dword [rsi+4]
    shl rax, cl
    mov dword [rsi], eax
    fild dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_shl_end
nseel_asm_shl_end:


global nseel_asm_shr
nseel_asm_shr:

    fisttp dword [rsi]
    fisttp dword [rsi+4]
    mov ecx, dword [rsi]
    mov eax, dword [rsi+4]
    sar rax, cl
    mov dword [rsi], eax
    fild dword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_shr_end
nseel_asm_shr_end:


global nseel_asm_mod_op
nseel_asm_mod_op:

    fld qword [rdi]
    fxch
    fabs
    fisttp dword [rdi]
    fabs
    fisttp dword [rsi]
%ifdef TARGET_X64
    sub rax, rax
%endif
    xor rdx, rdx
    cmp dword [rdi], 0
    je label_9  ;  skip devide, set return to 0
    mov eax, dword [rsi]
    div dword [rdi]
label_9:
    
    mov dword [rdi], edx
    fild dword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_mod_op_end
nseel_asm_mod_op_end:


global nseel_asm_or
nseel_asm_or:

    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    or qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    or dword [rsi], edi
    or dword [rsi+4], ecx
%endif
    fild qword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_end
nseel_asm_or_end:


global nseel_asm_or0
nseel_asm_or0:

    frndint
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or0_end
nseel_asm_or0_end:


global nseel_asm_or_op
nseel_asm_or_op:

    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    or qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    or dword [rdi], eax
    or dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_or_op_end
nseel_asm_or_op_end:


global nseel_asm_xor
nseel_asm_xor:

    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    xor qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    xor dword [rsi], edi
    xor dword [rsi+4], ecx
%endif
    fild qword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_xor_end
nseel_asm_xor_end:


global nseel_asm_xor_op
nseel_asm_xor_op:

    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    xor qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    xor dword [rdi], eax
    xor dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_xor_op_end
nseel_asm_xor_op_end:


global nseel_asm_and
nseel_asm_and:

    fisttp qword [rsi]
    fisttp qword [rsi+8]
%ifdef TARGET_X64
    mov rdi, qword [rsi+8]
    and qword [rsi], rdi
%else
    mov edi, dword [rsi+8]
    mov ecx, dword [rsi+12]
    and dword [rsi], edi
    and dword [rsi+4], ecx
%endif
    fild qword [rsi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_end
nseel_asm_and_end:


global nseel_asm_and_op
nseel_asm_and_op:

    fld qword [rdi]
    fxch
    fisttp qword [rdi]
    fisttp qword [rsi]
%ifdef TARGET_X64
    mov rax, qword [rsi]
    and qword [rdi], rax
%else
    mov eax, dword [rsi]
    mov ecx, dword [rsi+4]
    and dword [rdi], eax
    and dword [rdi+4], ecx
%endif
    fild qword [rdi]
    mov rax, rdi
    fstp qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_and_op_end
nseel_asm_and_op_end:


global nseel_asm_uplus
nseel_asm_uplus:

      
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uplus_end
nseel_asm_uplus_end:


global nseel_asm_uminus
nseel_asm_uminus:

    fchs
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_uminus_end
nseel_asm_uminus_end:


global nseel_asm_sign
nseel_asm_sign:


%ifdef TARGET_X64


    fst qword [rsp+-8]
    mov rdx, qword [rsp+-8]
    mov rcx, 0x7FFFFFFFFFFFFFFF
    test rdx, rcx
    jz label_10  ;  zero zero, return the value passed directly
       ;  calculate sign
      inc rcx  ;  rcx becomes 0x80000...
      fstp st0
      fld1
      test rdx, rcx
      jz label_10
      fchs
label_10:
  	

%else

    fst -dword [rsp+4]
    mov ecx, -dword [rsp+4]
    mov rdx, 0x7FFFFFFF
    test rcx, rdx
    jz label_11  ;  zero zero, return the value passed directly
       ;  calculate sign
      inc rdx  ;  edx becomes 0x8000...
      fstp st0
      fld1
      test rcx, rdx
      jz label_11
      fchs
label_11:
  	

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_sign_end
nseel_asm_sign_end:


global nseel_asm_bnot
nseel_asm_bnot:

    test rax, rax
    setz al
    and rax, 0xff
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bnot_end
nseel_asm_bnot_end:


global nseel_asm_if
nseel_asm_if:

%ifdef TARGET_X64
    sub rsp, 8
    test rax, rax
    jz label_12
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    call rax
    jmp label_13
label_12:
    
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    call rax
label_13:
    
    add rsp, 8
%else
    sub rsp, 12
    test rax, rax
    jz label_14
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    call rax
    jmp label_15
label_14:
    
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    call rax
label_15:
    
    add rsp, 12
%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_if_end
nseel_asm_if_end:


global nseel_asm_repeat
nseel_asm_repeat:

%ifdef TARGET_X64
    fisttp qword [rsi]
    mov rcx, qword [rsi]
%else
    fisttp dword [rsi]
    mov ecx, dword [rsi]
%endif
    cmp rcx, 1
    jl label_16
    cmp rcx, 10000000
    jl label_17
    mov rcx, 10000000
label_17:

      mov rdx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
      sub rsp, 8  ;  keep stack aligned to 16 byte 
%else
      sub rsp, 4  ;  keep stack aligned to 16 byte 
%endif
      push rsi  ;  revert back to last temp workspace
      push rcx

      call rdx

      pop rcx
      pop rsi
%ifdef TARGET_X64
      add rsp, 8  ;  keep stack aligned to 16 byte 
%else
      add rsp, 4  ;  keep stack aligned to 16 byte 
%endif
    dec rcx
    jnz label_17
label_16:

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_repeat_end
nseel_asm_repeat_end:


global nseel_asm_fcall
nseel_asm_fcall:

     mov rdx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
     sub rsp, 8
     call rdx
     add rsp, 8
%else
     sub rsp, 12  ;  keep stack 16 byte aligned, 4 bytes for return address 
     call rdx
     add rsp, 12
%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_fcall_end
nseel_asm_fcall_end:


global nseel_asm_repeatwhile
nseel_asm_repeatwhile:

    mov rcx, 10000000
label_18:

      mov rdx, qword 0xFEFEFEFEFEFEFEFE

%ifdef TARGET_X64
      sub rsp, 8  ;  keep stack aligned -- required on x86 and x64
%else
      sub rsp, 4  ;  keep stack aligned -- required on x86 and x64
%endif
      push rsi  ;  revert back to last temp workspace
      push rcx
      call rdx
      pop rcx
      pop rsi
%ifdef TARGET_X64
      add rsp, 8  ;  keep stack aligned -- required on x86 and x64 
%else
      add rsp, 4  ;  keep stack aligned -- required on x86 and x64 
%endif
	  test rax, rax
	  jz label_19
    dec rcx
    jnz label_18
label_19:
	
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_repeatwhile_end
nseel_asm_repeatwhile_end:


global nseel_asm_band
nseel_asm_band:

    test rax, rax
    jz label_20

     mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
        sub rsp, 8
%else
        sub rsp, 12
%endif
        call rcx
%ifdef TARGET_X64
        add rsp, 8
%else
        add rsp, 12
%endif
label_20:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_band_end
nseel_asm_band_end:


global nseel_asm_bor
nseel_asm_bor:

    test rax, rax
    jnz label_21

    mov rcx, qword 0xFEFEFEFEFEFEFEFE
%ifdef TARGET_X64
    sub rsp, 8
%else
    sub rsp, 12
%endif
    call rcx
%ifdef TARGET_X64
    add rsp, 8
%else
    add rsp, 12
%endif
label_21:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_bor_end
nseel_asm_bor_end:


global nseel_asm_equal
nseel_asm_equal:

    fsub
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256  ;  old behavior: if 256 set, true (NaN means true)
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_equal_end
nseel_asm_equal_end:


global nseel_asm_notequal
nseel_asm_notequal:

    fsub
    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256
    xor rax, 256  ;  old behavior: if 256 set, FALSE (NaN makes for false)
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_notequal_end
nseel_asm_notequal_end:


global nseel_asm_above
nseel_asm_above:

    fcompp
    fstsw ax
    and rax, 1280  ;   (1024+256) old behavior: NaN would mean 1, preserve that
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_above_end
nseel_asm_above_end:


global nseel_asm_beloweq
nseel_asm_beloweq:

    fcompp
    fstsw ax
    and rax, 256  ;  old behavior: NaN would be 0 (ugh)
    xor rax, 256
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_beloweq_end
nseel_asm_beloweq_end:


global nseel_asm_booltofp
nseel_asm_booltofp:

    test rax, rax
    jz label_22
    fld1
    jmp label_23
label_22:
    
    fldz
label_23:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_booltofp_end
nseel_asm_booltofp_end:


global nseel_asm_fptobool
nseel_asm_fptobool:

    fabs
%ifdef TARGET_X64
    mov rax, qword 0xFEFEFEFEFEFEFEFE
    fcomp qword [rax]  ; [g_closefact]
%else
    fcomp qword [qword 0xFEFEFEFEFEFEFEFE]  ; [g_closefact]
%endif
    fstsw ax
    and rax, 256
    xor rax, 256
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_fptobool_end
nseel_asm_fptobool_end:


global nseel_asm_min
nseel_asm_min:

    fld qword [rdi]
    fcomp qword [rax]
    push rax
    fstsw ax
    test rax, 256
    pop rax
    jz label_24
    mov rax, rdi
label_24:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_min_end
nseel_asm_min_end:


global nseel_asm_max
nseel_asm_max:

    fld qword [rdi]
    fcomp qword [rax]
    push rax
    fstsw ax
    test rax, 256
    pop rax
    jnz label_25
    mov rax, rdi
label_25:
    
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_max_end
nseel_asm_max_end:


global nseel_asm_min_fp
nseel_asm_min_fp:

    fcom
    fstsw ax
    test rax, 256
    jz label_26
    fxch
label_26:
    
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_min_fp_end
nseel_asm_min_fp_end:


global nseel_asm_max_fp
nseel_asm_max_fp:

    fcom
    fstsw ax
    test rax, 256
    jnz label_27
    fxch
label_27:
    
    fstp st0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global nseel_asm_max_fp_end
nseel_asm_max_fp_end:


global _asm_generic3parm
_asm_generic3parm:

%ifdef TARGET_X64

%ifdef AMD64ABI

    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context

    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rax

    mov rsi, r15
    add rsp, 128

%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif

%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rcx  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_end
_asm_generic3parm_end:


global _asm_generic3parm_retd
_asm_generic3parm_retd:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rdx, rdi  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rsi, rcx  ;  second parameter = parm
    mov rcx, rax  ;  fourth parameter = parm
    mov rax, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rax
    mov rsi, r15
%else
    mov rdx, rcx  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r8, rdi  ;  third parameter = parm
    mov r9, rax  ;  fourth parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
%endif
    movq [rsp], xmm0
    fld qword [rsp]
    add rsp, 128
%else

    sub rsp, 16
    mov dword [rsp+8], edi
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsp+12], eax
    mov dword [rsp+4], ecx
    mov dword [rsp], edx
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic3parm_retd_end
_asm_generic3parm_retd_end:


global _asm_generic2parm
_asm_generic2parm:

%ifdef TARGET_X64

%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  third parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rcx
    mov rsi, r15
    add rsp, 128
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rdi  ;  second parameter = parm
    mov r8, rax  ;  third parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 4  ;  keep stack aligned
    push rax  ;  push parameter
    push rdi  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_end
_asm_generic2parm_end:


global _asm_generic2parm_retd
_asm_generic2parm_retd:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov r15, rsi
    mov rsi, rdi  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    mov rdx, rax  ;  third parameter = parm
    sub rsp, 128
    call rcx
    mov rsi, r15
%else
    mov rdx, rdi  ;  second parameter = parm
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    mov r8, rax  ;  third parameter = parm
    sub rsp, 128
    call rdi
%endif
    movq [rsp], xmm0
    fld qword [rsp]
    add rsp, 128
%else

    sub rsp, 16
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rsp], edx
    mov dword [rsp+4], edi
    mov dword [rsp+8], eax
    call rcx
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic2parm_retd_end
_asm_generic2parm_retd_end:


global _asm_generic1parm
_asm_generic1parm:

%ifdef TARGET_X64
%ifdef AMD64ABI
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov r15, rsi
    mov rsi, rax  ;  second parameter = parm
    sub rsp, 128
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    call rcx
    mov rsi, r15
    add rsp, 128
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdx, rax  ;  second parameter = parm
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function
    sub rsp, 128
    call rdi
    add rsp, 128
%endif
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 8  ;  keep stack aligned
    push rax  ;  push parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16

%endif

db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_end
_asm_generic1parm_end:


global _asm_generic1parm_retd
_asm_generic1parm_retd:

%ifdef TARGET_X64
    sub rsp, 128
%ifdef AMD64ABI
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  function address
    mov r15, rsi  ;  save rsi
    mov rsi, rax  ;  second parameter = parameter

    call rcx

    mov rsi, r15
%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter= context
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  call function

    mov rdx, rax  ;  second parameter = parm

    call rdi
%endif
    movq [rsp], xmm0
    fld qword [rsp]
    add rsp, 128
%else

    mov rdx, qword 0xFEFEFEFEFEFEFEFE  ;  context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  func-addr
    sub rsp, 16
    mov dword [rsp+4], eax  ;  push parameter
    mov dword [rsp], edx  ;  push context pointer
    call rdi
    add rsp, 16

%endif
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_generic1parm_retd_end
_asm_generic1parm_retd_end:


global _asm_megabuf
_asm_megabuf:



%ifdef TARGET_X64


%ifdef AMD64ABI

    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer

    mov rdx, qword 0xFEFEFEFEFEFEFEFE

    fadd qword [rdx]
    fisttp dword [rsi]
    sub rdx, rdx

     ;  check if (%rsi) is in range, and buffer available, otherwise call function
    mov edx, dword [rsi]
    test rdx, 0xff800000  ;  0xFFFFFFFF - (NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK - 1)
    jnz label_28
    mov rax, rdx
    shr rax, 13      ;  log2(NSEEL_RAM_ITEMSPERBLOCK) - log2(sizeof(void*))
    and rax, 0x3F8   ;  (NSEEL_RAM_BLOCKS-1)*sizeof(void*)
    mov rax, qword [rdi+rax]
    test rax, rax
    jz label_28
    and rdx, 0xFFFF  ;  (NSEEL_RAM_ITEMSPERBLOCK-1)
    shl rdx, 3       ;  log2(sizeof(EEL_F))
    add rax, rdx
    jmp label_29


label_28:
    
    mov r15, rsi  ;  save rsi
    mov rsi, rdx  ;  esi becomes second parameter (edi is first, context pointer)
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 128
    call rdx
    mov rsi, r15  ;  restore rsi
    add rsp, 128
label_29:
    

%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rdi, rdi

    fadd qword [rdx]

    fisttp dword [rsi]

     ;  check if (%esi) is in range...
    mov edi, dword [rsi]
    test rdi, 0xff800000    ;  0xFFFFFFFF - (NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK - 1)
    jnz label_30
    mov rax, rdi
    shr rax, 13            ;  log2(NSEEL_RAM_ITEMSPERBLOCK) - log2(sizeof(void*))
    and rax, 0x3F8         ;  (NSEEL_RAM_BLOCKS-1)*sizeof(void*)
    mov rax, qword [rcx+rax]
    test rax, rax
    jz label_30
    and rdi, 0xFFFF    ;  (NSEEL_RAM_ITEMSPERBLOCK-1)
    shl rdi, 3         ;  log2(sizeof(EEL_F))
    add rax, rdi
    jmp label_31

label_30:
    
    mov rdx, rdi  ;  rdx is second parameter (rcx is first)
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  function ptr
    sub rsp, 128
    call rdi
    add rsp, 128
label_31:
    
%endif


%else
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
    fisttp dword [rsi]

     ;  check if (%esi) is in range, and buffer available, otherwise call function
    mov edi, dword [rsi]
    test rdi, 0xff800000   ;  0xFFFFFFFF - (NSEEL_RAM_BLOCKS*NSEEL_RAM_ITEMSPERBLOCK - 1)
    jnz label_32

    mov rax, rdi
    shr rax, 14             ;  log2(NSEEL_RAM_ITEMSPERBLOCK) - log2(sizeof(void *))
    and rax, 0x1FC     ;  (NSEEL_RAM_BLOCKS-1)*sizeof(void*)
    mov eax, dword [rdx+rax]
    test rax, rax
    jz label_32
    and rdi, 0xFFFF   ;  (NSEEL_RAM_ITEMSPERBLOCK-1)
    shl rdi, 3        ;  log2(sizeof(EEL_F))
    add rax, rdi
    jmp label_33


label_32:
    
    sub rsp, 8  ;  keep stack aligned
    push rdi  ;  parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16

label_33:
    


%endif



db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_megabuf_end
_asm_megabuf_end:


global _asm_gmegabuf
_asm_gmegabuf:



%ifdef TARGET_X64


%ifdef AMD64ABI

    mov r15, rsi
    mov rdi, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rdx]
    fisttp dword [r15]
    xor rsi, rsi
    mov esi, dword [r15]  ;  r15 = esi (from above)
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 128
    call rdx
    mov rsi, r15
    add rsp, 128

%else
    mov rcx, qword 0xFEFEFEFEFEFEFEFE  ;  first parameter = context pointer
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [rdx]
    fisttp dword [rsi]
    xor rdx, rdx
    mov edx, dword [rsi]
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    sub rsp, 128
    call rdi
    add rsp, 128
%endif


%else
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    fadd qword [qword 0xFEFEFEFEFEFEFEFE]
    fisttp dword [rsi]
    sub rsp, 8  ;  keep stack aligned
    push dword [rsi]  ;  parameter
    push rdx  ;  push context pointer
    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    call rdi
    add rsp, 16

%endif



db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90


global _asm_gmegabuf_end
_asm_gmegabuf_end:


global nseel_asm_stack_push
nseel_asm_stack_push:
%ifdef TARGET_X64

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword [rax]
    mov rax, qword [rdi]
    add rax, 8
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
    mov qword [rax], rcx
    mov qword [rdi], rax
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE

    mov ecx, dword [rax]
    mov edx, dword [rax+4]

    mov eax, dword [rdi]

    add rax, 8
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE

    mov dword [rax], ecx
    mov dword [rax+4], edx

    mov dword [rdi], eax
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_push_end
nseel_asm_stack_push_end:


global nseel_asm_stack_pop
nseel_asm_stack_pop:
%ifdef TARGET_X64

      mov rdi, qword 0xFEFEFEFEFEFEFEFE
      mov rcx, qword [rdi]
      movq xmm0, [rcx]
      sub rcx, 8
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      and rcx, rdx
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      or rcx, rdx
      mov qword [rdi], rcx
      movq [rax], xmm0
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    fld qword [rcx]
    sub rcx, 8
    and rcx, qword 0xFEFEFEFEFEFEFEFE
    or rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rdi], ecx
    fstp qword [rax]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_pop_end
nseel_asm_stack_pop_end:


global nseel_asm_stack_pop_fast
nseel_asm_stack_pop_fast:
%ifdef TARGET_X64

      mov rdi, qword 0xFEFEFEFEFEFEFEFE
      mov rcx, qword [rdi]
      mov rax, rcx
      sub rcx, 8
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      and rcx, rdx
      mov rdx, qword 0xFEFEFEFEFEFEFEFE
      or rcx, rdx
      mov qword [rdi], rcx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    mov rax, rcx
    sub rcx, 8
    and rcx, qword 0xFEFEFEFEFEFEFEFE
    or rcx, qword 0xFEFEFEFEFEFEFEFE
    mov dword [rdi], ecx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_pop_fast_end
nseel_asm_stack_pop_fast_end:


global nseel_asm_stack_peek_int
nseel_asm_stack_peek_int:
%ifdef TARGET_X64

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rax, qword [rdi]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov eax, dword [rdi]
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    sub rax, rdx
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_int_end
nseel_asm_stack_peek_int_end:


global nseel_asm_stack_peek
nseel_asm_stack_peek:
%ifdef TARGET_X64

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    fisttp dword [rsi]
    mov rax, qword [rdi]
    mov rdx, qword [rsi]
    shl rdx, 3  ;  log2(sizeof(EEL_F))
    sub rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    and rax, rdx
    mov rdx, qword 0xFEFEFEFEFEFEFEFE
    or rax, rdx
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    fisttp dword [rsi]
    mov eax, dword [rdi]
    mov edx, dword [rsi]
    shl rdx, 3  ;  log2(sizeof(EEL_F))
    sub rax, rdx
    and rax, qword 0xFEFEFEFEFEFEFEFE
    or rax, qword 0xFEFEFEFEFEFEFEFE
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_end
nseel_asm_stack_peek_end:


global nseel_asm_stack_peek_top
nseel_asm_stack_peek_top:
%ifdef TARGET_X64

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rax, qword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov eax, dword [rdi]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_peek_top_end
nseel_asm_stack_peek_top_end:


global nseel_asm_stack_exch
nseel_asm_stack_exch:
%ifdef TARGET_X64

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov rcx, qword [rdi]
    movq xmm0, [rcx]
    movq xmm1, [rax]
    movq [rax], xmm0
    movq [rcx], xmm1
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%else

    mov rdi, qword 0xFEFEFEFEFEFEFEFE
    mov ecx, dword [rdi]
    fld qword [rcx]
    fld qword [rax]
    fstp qword [rcx]
    fstp qword [rax]
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif


global nseel_asm_stack_exch_end
nseel_asm_stack_exch_end:
%ifdef TARGET_X64


global win64_callcode
win64_callcode:

%ifdef AMD64ABI
		mov rax, rdi
%else
		mov rax, rcx
%endif

		push rbx
		push rbp
%ifndef AMD64ABI
		push rdi
		push rsi
		push r12
		push r13
%endif
		push r14  ;  on AMD64ABI, we'll use r14/r15 to save edi/esi
		push r15
		call rax
		pop r15
		pop r14
%ifndef AMD64ABI
		pop r13
		pop r12
		pop rsi
		pop rdi
		fclex
%endif
		pop rbp
		pop rbx
		ret
db 0x89,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90,0x90
%endif
